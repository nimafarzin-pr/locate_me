// Mocks generated by Mockito 5.4.4 from annotations
// in locate_me/test/features/add_or_edit/view_model/add_location_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:math' as _i6;
import 'dart:typed_data' as _i10;
import 'dart:ui' as _i7;

import 'package:flutter_map/flutter_map.dart' as _i2;
import 'package:geolocator_platform_interface/src/enums/enums.dart' as _i14;
import 'package:geolocator_platform_interface/src/geolocator_platform_interface.dart'
    as _i13;
import 'package:geolocator_platform_interface/src/models/models.dart' as _i4;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i9;
import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart'
    as _i3;
import 'package:latlong2/latlong.dart' as _i5;
import 'package:locate_me/features/add/repository/add_repository.dart' as _i11;
import 'package:locate_me/features/home/model/place_item_model.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMapCamera_0 extends _i1.SmartFake implements _i2.MapCamera {
  _FakeMapCamera_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLatLngBounds_1 extends _i1.SmartFake implements _i3.LatLngBounds {
  _FakeLatLngBounds_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScreenCoordinate_2 extends _i1.SmartFake
    implements _i3.ScreenCoordinate {
  _FakeScreenCoordinate_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLatLng_3 extends _i1.SmartFake implements _i3.LatLng {
  _FakeLatLng_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosition_4 extends _i1.SmartFake implements _i4.Position {
  _FakePosition_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCrs_5 extends _i1.SmartFake implements _i2.Crs {
  _FakeCrs_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLatLng_6 extends _i1.SmartFake implements _i5.LatLng {
  _FakeLatLng_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePoint_7<T extends num> extends _i1.SmartFake
    implements _i6.Point<T> {
  _FakePoint_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLatLngBounds_8 extends _i1.SmartFake implements _i2.LatLngBounds {
  _FakeLatLngBounds_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBounds_9<T extends num> extends _i1.SmartFake
    implements _i2.Bounds<T> {
  _FakeBounds_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_10 extends _i1.SmartFake implements _i7.Offset {
  _FakeOffset_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapController extends _i1.Mock implements _i2.MapController {
  @override
  _i8.Stream<_i2.MapEvent> get mapEventStream => (super.noSuchMethod(
        Invocation.getter(#mapEventStream),
        returnValue: _i8.Stream<_i2.MapEvent>.empty(),
        returnValueForMissingStub: _i8.Stream<_i2.MapEvent>.empty(),
      ) as _i8.Stream<_i2.MapEvent>);

  @override
  _i2.MapCamera get camera => (super.noSuchMethod(
        Invocation.getter(#camera),
        returnValue: _FakeMapCamera_0(
          this,
          Invocation.getter(#camera),
        ),
        returnValueForMissingStub: _FakeMapCamera_0(
          this,
          Invocation.getter(#camera),
        ),
      ) as _i2.MapCamera);

  @override
  bool move(
    _i5.LatLng? center,
    double? zoom, {
    _i7.Offset? offset = _i7.Offset.zero,
    String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #move,
          [
            center,
            zoom,
          ],
          {
            #offset: offset,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool rotate(
    double? degree, {
    String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rotate,
          [degree],
          {#id: id},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  ({bool moveSuccess, bool rotateSuccess}) rotateAroundPoint(
    double? degree, {
    _i6.Point<double>? point,
    _i7.Offset? offset,
    String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rotateAroundPoint,
          [degree],
          {
            #point: point,
            #offset: offset,
            #id: id,
          },
        ),
        returnValue: (moveSuccess: false, rotateSuccess: false),
        returnValueForMissingStub: (moveSuccess: false, rotateSuccess: false),
      ) as ({bool moveSuccess, bool rotateSuccess}));

  @override
  ({bool moveSuccess, bool rotateSuccess}) moveAndRotate(
    _i5.LatLng? center,
    double? zoom,
    double? degree, {
    String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveAndRotate,
          [
            center,
            zoom,
            degree,
          ],
          {#id: id},
        ),
        returnValue: (moveSuccess: false, rotateSuccess: false),
        returnValueForMissingStub: (moveSuccess: false, rotateSuccess: false),
      ) as ({bool moveSuccess, bool rotateSuccess}));

  @override
  bool fitCamera(_i2.CameraFit? cameraFit) => (super.noSuchMethod(
        Invocation.method(
          #fitCamera,
          [cameraFit],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i9.GoogleMapController {
  @override
  int get mapId => (super.noSuchMethod(
        Invocation.getter(#mapId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i8.Future<void> clearTileCache(_i3.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTileCache,
          [tileOverlayId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> animateCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateCamera,
          [cameraUpdate],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> moveCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveCamera,
          [cameraUpdate],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setMapStyle(String? mapStyle) => (super.noSuchMethod(
        Invocation.method(
          #setMapStyle,
          [mapStyle],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getStyleError() => (super.noSuchMethod(
        Invocation.method(
          #getStyleError,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i3.LatLngBounds> getVisibleRegion() => (super.noSuchMethod(
        Invocation.method(
          #getVisibleRegion,
          [],
        ),
        returnValue: _i8.Future<_i3.LatLngBounds>.value(_FakeLatLngBounds_1(
          this,
          Invocation.method(
            #getVisibleRegion,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.LatLngBounds>.value(_FakeLatLngBounds_1(
          this,
          Invocation.method(
            #getVisibleRegion,
            [],
          ),
        )),
      ) as _i8.Future<_i3.LatLngBounds>);

  @override
  _i8.Future<_i3.ScreenCoordinate> getScreenCoordinate(_i3.LatLng? latLng) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScreenCoordinate,
          [latLng],
        ),
        returnValue:
            _i8.Future<_i3.ScreenCoordinate>.value(_FakeScreenCoordinate_2(
          this,
          Invocation.method(
            #getScreenCoordinate,
            [latLng],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.ScreenCoordinate>.value(_FakeScreenCoordinate_2(
          this,
          Invocation.method(
            #getScreenCoordinate,
            [latLng],
          ),
        )),
      ) as _i8.Future<_i3.ScreenCoordinate>);

  @override
  _i8.Future<_i3.LatLng> getLatLng(_i3.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatLng,
          [screenCoordinate],
        ),
        returnValue: _i8.Future<_i3.LatLng>.value(_FakeLatLng_3(
          this,
          Invocation.method(
            #getLatLng,
            [screenCoordinate],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i3.LatLng>.value(_FakeLatLng_3(
          this,
          Invocation.method(
            #getLatLng,
            [screenCoordinate],
          ),
        )),
      ) as _i8.Future<_i3.LatLng>);

  @override
  _i8.Future<void> showMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #showMarkerInfoWindow,
          [markerId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> hideMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #hideMarkerInfoWindow,
          [markerId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> isMarkerInfoWindowShown(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMarkerInfoWindowShown,
          [markerId],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<double> getZoomLevel() => (super.noSuchMethod(
        Invocation.method(
          #getZoomLevel,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
        returnValueForMissingStub: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<_i10.Uint8List?> takeSnapshot() => (super.noSuchMethod(
        Invocation.method(
          #takeSnapshot,
          [],
        ),
        returnValue: _i8.Future<_i10.Uint8List?>.value(),
        returnValueForMissingStub: _i8.Future<_i10.Uint8List?>.value(),
      ) as _i8.Future<_i10.Uint8List?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AddRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddRepository extends _i1.Mock implements _i11.AddRepository {
  @override
  _i8.Future<int> addLocation({required _i12.PlaceItemModel? location}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLocation,
          [],
          {#location: location},
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<void> updateLocation({required _i12.PlaceItemModel? location}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLocation,
          [],
          {#location: location},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GeolocatorPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorPlatform extends _i1.Mock
    implements _i13.GeolocatorPlatform {
  @override
  _i8.Future<_i14.LocationPermission> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i8.Future<_i14.LocationPermission>.value(
            _i14.LocationPermission.denied),
        returnValueForMissingStub: _i8.Future<_i14.LocationPermission>.value(
            _i14.LocationPermission.denied),
      ) as _i8.Future<_i14.LocationPermission>);

  @override
  _i8.Future<_i14.LocationPermission> requestPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i8.Future<_i14.LocationPermission>.value(
            _i14.LocationPermission.denied),
        returnValueForMissingStub: _i8.Future<_i14.LocationPermission>.value(
            _i14.LocationPermission.denied),
      ) as _i8.Future<_i14.LocationPermission>);

  @override
  _i8.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Position?> getLastKnownPosition(
          {bool? forceLocationManager = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastKnownPosition,
          [],
          {#forceLocationManager: forceLocationManager},
        ),
        returnValue: _i8.Future<_i4.Position?>.value(),
        returnValueForMissingStub: _i8.Future<_i4.Position?>.value(),
      ) as _i8.Future<_i4.Position?>);

  @override
  _i8.Future<_i4.Position> getCurrentPosition(
          {_i4.LocationSettings? locationSettings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
          {#locationSettings: locationSettings},
        ),
        returnValue: _i8.Future<_i4.Position>.value(_FakePosition_4(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
            {#locationSettings: locationSettings},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Position>.value(_FakePosition_4(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
            {#locationSettings: locationSettings},
          ),
        )),
      ) as _i8.Future<_i4.Position>);

  @override
  _i8.Stream<_i14.ServiceStatus> getServiceStatusStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getServiceStatusStream,
          [],
        ),
        returnValue: _i8.Stream<_i14.ServiceStatus>.empty(),
        returnValueForMissingStub: _i8.Stream<_i14.ServiceStatus>.empty(),
      ) as _i8.Stream<_i14.ServiceStatus>);

  @override
  _i8.Stream<_i4.Position> getPositionStream(
          {_i4.LocationSettings? locationSettings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPositionStream,
          [],
          {#locationSettings: locationSettings},
        ),
        returnValue: _i8.Stream<_i4.Position>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.Position>.empty(),
      ) as _i8.Stream<_i4.Position>);

  @override
  _i8.Future<_i14.LocationAccuracyStatus> requestTemporaryFullAccuracy(
          {required String? purposeKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestTemporaryFullAccuracy,
          [],
          {#purposeKey: purposeKey},
        ),
        returnValue: _i8.Future<_i14.LocationAccuracyStatus>.value(
            _i14.LocationAccuracyStatus.reduced),
        returnValueForMissingStub:
            _i8.Future<_i14.LocationAccuracyStatus>.value(
                _i14.LocationAccuracyStatus.reduced),
      ) as _i8.Future<_i14.LocationAccuracyStatus>);

  @override
  _i8.Future<_i14.LocationAccuracyStatus> getLocationAccuracy() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationAccuracy,
          [],
        ),
        returnValue: _i8.Future<_i14.LocationAccuracyStatus>.value(
            _i14.LocationAccuracyStatus.reduced),
        returnValueForMissingStub:
            _i8.Future<_i14.LocationAccuracyStatus>.value(
                _i14.LocationAccuracyStatus.reduced),
      ) as _i8.Future<_i14.LocationAccuracyStatus>);

  @override
  _i8.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(
          #openLocationSettings,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  double distanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #distanceBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double bearingBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #bearingBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [MapCamera].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapCamera extends _i1.Mock implements _i2.MapCamera {
  @override
  _i2.Crs get crs => (super.noSuchMethod(
        Invocation.getter(#crs),
        returnValue: _FakeCrs_5(
          this,
          Invocation.getter(#crs),
        ),
        returnValueForMissingStub: _FakeCrs_5(
          this,
          Invocation.getter(#crs),
        ),
      ) as _i2.Crs);

  @override
  _i5.LatLng get center => (super.noSuchMethod(
        Invocation.getter(#center),
        returnValue: _FakeLatLng_6(
          this,
          Invocation.getter(#center),
        ),
        returnValueForMissingStub: _FakeLatLng_6(
          this,
          Invocation.getter(#center),
        ),
      ) as _i5.LatLng);

  @override
  double get zoom => (super.noSuchMethod(
        Invocation.getter(#zoom),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get rotation => (super.noSuchMethod(
        Invocation.getter(#rotation),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i6.Point<double> get nonRotatedSize => (super.noSuchMethod(
        Invocation.getter(#nonRotatedSize),
        returnValue: _FakePoint_7<double>(
          this,
          Invocation.getter(#nonRotatedSize),
        ),
        returnValueForMissingStub: _FakePoint_7<double>(
          this,
          Invocation.getter(#nonRotatedSize),
        ),
      ) as _i6.Point<double>);

  @override
  _i2.LatLngBounds get visibleBounds => (super.noSuchMethod(
        Invocation.getter(#visibleBounds),
        returnValue: _FakeLatLngBounds_8(
          this,
          Invocation.getter(#visibleBounds),
        ),
        returnValueForMissingStub: _FakeLatLngBounds_8(
          this,
          Invocation.getter(#visibleBounds),
        ),
      ) as _i2.LatLngBounds);

  @override
  _i6.Point<double> get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakePoint_7<double>(
          this,
          Invocation.getter(#size),
        ),
        returnValueForMissingStub: _FakePoint_7<double>(
          this,
          Invocation.getter(#size),
        ),
      ) as _i6.Point<double>);

  @override
  _i6.Point<double> get pixelOrigin => (super.noSuchMethod(
        Invocation.getter(#pixelOrigin),
        returnValue: _FakePoint_7<double>(
          this,
          Invocation.getter(#pixelOrigin),
        ),
        returnValueForMissingStub: _FakePoint_7<double>(
          this,
          Invocation.getter(#pixelOrigin),
        ),
      ) as _i6.Point<double>);

  @override
  double get rotationRad => (super.noSuchMethod(
        Invocation.getter(#rotationRad),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i2.Bounds<double> get pixelBounds => (super.noSuchMethod(
        Invocation.getter(#pixelBounds),
        returnValue: _FakeBounds_9<double>(
          this,
          Invocation.getter(#pixelBounds),
        ),
        returnValueForMissingStub: _FakeBounds_9<double>(
          this,
          Invocation.getter(#pixelBounds),
        ),
      ) as _i2.Bounds<double>);

  @override
  _i2.MapCamera withNonRotatedSize(_i6.Point<double>? nonRotatedSize) =>
      (super.noSuchMethod(
        Invocation.method(
          #withNonRotatedSize,
          [nonRotatedSize],
        ),
        returnValue: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withNonRotatedSize,
            [nonRotatedSize],
          ),
        ),
        returnValueForMissingStub: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withNonRotatedSize,
            [nonRotatedSize],
          ),
        ),
      ) as _i2.MapCamera);

  @override
  _i2.MapCamera withRotation(double? rotation) => (super.noSuchMethod(
        Invocation.method(
          #withRotation,
          [rotation],
        ),
        returnValue: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withRotation,
            [rotation],
          ),
        ),
        returnValueForMissingStub: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withRotation,
            [rotation],
          ),
        ),
      ) as _i2.MapCamera);

  @override
  _i2.MapCamera withOptions(_i2.MapOptions? options) => (super.noSuchMethod(
        Invocation.method(
          #withOptions,
          [options],
        ),
        returnValue: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withOptions,
            [options],
          ),
        ),
        returnValueForMissingStub: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withOptions,
            [options],
          ),
        ),
      ) as _i2.MapCamera);

  @override
  _i2.MapCamera withPosition({
    _i5.LatLng? center,
    double? zoom,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withPosition,
          [],
          {
            #center: center,
            #zoom: zoom,
          },
        ),
        returnValue: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withPosition,
            [],
            {
              #center: center,
              #zoom: zoom,
            },
          ),
        ),
        returnValueForMissingStub: _FakeMapCamera_0(
          this,
          Invocation.method(
            #withPosition,
            [],
            {
              #center: center,
              #zoom: zoom,
            },
          ),
        ),
      ) as _i2.MapCamera);

  @override
  _i6.Point<double> project(
    _i5.LatLng? latlng, [
    double? zoom,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #project,
          [
            latlng,
            zoom,
          ],
        ),
        returnValue: _FakePoint_7<double>(
          this,
          Invocation.method(
            #project,
            [
              latlng,
              zoom,
            ],
          ),
        ),
        returnValueForMissingStub: _FakePoint_7<double>(
          this,
          Invocation.method(
            #project,
            [
              latlng,
              zoom,
            ],
          ),
        ),
      ) as _i6.Point<double>);

  @override
  _i5.LatLng unproject(
    _i6.Point<num>? point, [
    double? zoom,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #unproject,
          [
            point,
            zoom,
          ],
        ),
        returnValue: _FakeLatLng_6(
          this,
          Invocation.method(
            #unproject,
            [
              point,
              zoom,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeLatLng_6(
          this,
          Invocation.method(
            #unproject,
            [
              point,
              zoom,
            ],
          ),
        ),
      ) as _i5.LatLng);

  @override
  _i5.LatLng layerPointToLatLng(_i6.Point<num>? point) => (super.noSuchMethod(
        Invocation.method(
          #layerPointToLatLng,
          [point],
        ),
        returnValue: _FakeLatLng_6(
          this,
          Invocation.method(
            #layerPointToLatLng,
            [point],
          ),
        ),
        returnValueForMissingStub: _FakeLatLng_6(
          this,
          Invocation.method(
            #layerPointToLatLng,
            [point],
          ),
        ),
      ) as _i5.LatLng);

  @override
  double getZoomScale(
    double? toZoom,
    double? fromZoom,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getZoomScale,
          [
            toZoom,
            fromZoom,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double getScaleZoom(double? scale) => (super.noSuchMethod(
        Invocation.method(
          #getScaleZoom,
          [scale],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i7.Offset getOffsetFromOrigin(_i5.LatLng? pos) => (super.noSuchMethod(
        Invocation.method(
          #getOffsetFromOrigin,
          [pos],
        ),
        returnValue: _FakeOffset_10(
          this,
          Invocation.method(
            #getOffsetFromOrigin,
            [pos],
          ),
        ),
        returnValueForMissingStub: _FakeOffset_10(
          this,
          Invocation.method(
            #getOffsetFromOrigin,
            [pos],
          ),
        ),
      ) as _i7.Offset);

  @override
  _i6.Point<int> getNewPixelOrigin(
    _i5.LatLng? center, [
    double? zoom,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewPixelOrigin,
          [
            center,
            zoom,
          ],
        ),
        returnValue: _FakePoint_7<int>(
          this,
          Invocation.method(
            #getNewPixelOrigin,
            [
              center,
              zoom,
            ],
          ),
        ),
        returnValueForMissingStub: _FakePoint_7<int>(
          this,
          Invocation.method(
            #getNewPixelOrigin,
            [
              center,
              zoom,
            ],
          ),
        ),
      ) as _i6.Point<int>);

  @override
  _i2.Bounds<double> pixelBoundsAtZoom(double? zoom) => (super.noSuchMethod(
        Invocation.method(
          #pixelBoundsAtZoom,
          [zoom],
        ),
        returnValue: _FakeBounds_9<double>(
          this,
          Invocation.method(
            #pixelBoundsAtZoom,
            [zoom],
          ),
        ),
        returnValueForMissingStub: _FakeBounds_9<double>(
          this,
          Invocation.method(
            #pixelBoundsAtZoom,
            [zoom],
          ),
        ),
      ) as _i2.Bounds<double>);

  @override
  _i6.Point<double> latLngToScreenPoint(_i5.LatLng? latLng) =>
      (super.noSuchMethod(
        Invocation.method(
          #latLngToScreenPoint,
          [latLng],
        ),
        returnValue: _FakePoint_7<double>(
          this,
          Invocation.method(
            #latLngToScreenPoint,
            [latLng],
          ),
        ),
        returnValueForMissingStub: _FakePoint_7<double>(
          this,
          Invocation.method(
            #latLngToScreenPoint,
            [latLng],
          ),
        ),
      ) as _i6.Point<double>);

  @override
  _i5.LatLng pointToLatLng(_i6.Point<num>? localPoint) => (super.noSuchMethod(
        Invocation.method(
          #pointToLatLng,
          [localPoint],
        ),
        returnValue: _FakeLatLng_6(
          this,
          Invocation.method(
            #pointToLatLng,
            [localPoint],
          ),
        ),
        returnValueForMissingStub: _FakeLatLng_6(
          this,
          Invocation.method(
            #pointToLatLng,
            [localPoint],
          ),
        ),
      ) as _i5.LatLng);

  @override
  _i6.Point<double> rotatePoint(
    _i6.Point<double>? mapCenter,
    _i6.Point<double>? point, {
    bool? counterRotation = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rotatePoint,
          [
            mapCenter,
            point,
          ],
          {#counterRotation: counterRotation},
        ),
        returnValue: _FakePoint_7<double>(
          this,
          Invocation.method(
            #rotatePoint,
            [
              mapCenter,
              point,
            ],
            {#counterRotation: counterRotation},
          ),
        ),
        returnValueForMissingStub: _FakePoint_7<double>(
          this,
          Invocation.method(
            #rotatePoint,
            [
              mapCenter,
              point,
            ],
            {#counterRotation: counterRotation},
          ),
        ),
      ) as _i6.Point<double>);

  @override
  double clampZoom(double? zoom) => (super.noSuchMethod(
        Invocation.method(
          #clampZoom,
          [zoom],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i5.LatLng offsetToCrs(
    _i7.Offset? offset, [
    double? zoom,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #offsetToCrs,
          [
            offset,
            zoom,
          ],
        ),
        returnValue: _FakeLatLng_6(
          this,
          Invocation.method(
            #offsetToCrs,
            [
              offset,
              zoom,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeLatLng_6(
          this,
          Invocation.method(
            #offsetToCrs,
            [
              offset,
              zoom,
            ],
          ),
        ),
      ) as _i5.LatLng);

  @override
  _i5.LatLng focusedZoomCenter(
    _i6.Point<num>? cursorPos,
    double? zoom,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #focusedZoomCenter,
          [
            cursorPos,
            zoom,
          ],
        ),
        returnValue: _FakeLatLng_6(
          this,
          Invocation.method(
            #focusedZoomCenter,
            [
              cursorPos,
              zoom,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeLatLng_6(
          this,
          Invocation.method(
            #focusedZoomCenter,
            [
              cursorPos,
              zoom,
            ],
          ),
        ),
      ) as _i5.LatLng);
}
