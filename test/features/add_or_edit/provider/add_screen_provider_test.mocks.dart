// Mocks generated by Mockito 5.4.4 from annotations
// in locate_me/test/features/add_or_edit/provider/add_screen_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/material.dart' as _i7;
import 'package:flutter_map/flutter_map.dart' as _i6;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i8;
import 'package:latlong2/latlong.dart' as _i2;
import 'package:locate_me/core/common_features/category/enums/category.dart'
    as _i12;
import 'package:locate_me/core/common_features/database/repository/location/location_repository_impl.dart'
    as _i11;
import 'package:locate_me/features/add/repository/add_repository.dart' as _i10;
import 'package:locate_me/features/add/view_model/add_location_notifier.dart'
    as _i4;
import 'package:locate_me/features/home/model/place_item_model.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLatLng_0 extends _i1.SmartFake implements _i2.LatLng {
  _FakeLatLng_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncNotifierProviderRef_1<T> extends _i1.SmartFake
    implements _i3.AsyncNotifierProviderRef<T> {
  _FakeAsyncNotifierProviderRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_2<T> extends _i1.SmartFake implements _i3.AsyncValue<T> {
  _FakeAsyncValue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddLocationNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddLocationNotifier extends _i1.Mock
    implements _i4.AddLocationNotifier {
  @override
  _i5.Future<_i2.LatLng> get currentLocation => (super.noSuchMethod(
        Invocation.getter(#currentLocation),
        returnValue: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.getter(#currentLocation),
        )),
        returnValueForMissingStub: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.getter(#currentLocation),
        )),
      ) as _i5.Future<_i2.LatLng>);

  @override
  _i3.AsyncNotifierProviderRef<_i2.LatLng> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAsyncNotifierProviderRef_1<_i2.LatLng>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeAsyncNotifierProviderRef_1<_i2.LatLng>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.AsyncNotifierProviderRef<_i2.LatLng>);

  @override
  _i3.AsyncValue<_i2.LatLng> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_2<_i2.LatLng>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAsyncValue_2<_i2.LatLng>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AsyncValue<_i2.LatLng>);

  @override
  set state(_i3.AsyncValue<_i2.LatLng>? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.LatLng> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.getter(#future),
        )),
      ) as _i5.Future<_i2.LatLng>);

  @override
  _i5.Future<_i2.LatLng> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
      ) as _i5.Future<_i2.LatLng>);

  @override
  void updateLocation(_i2.LatLng? position) => super.noSuchMethod(
        Invocation.method(
          #updateLocation,
          [position],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> animateToMyLocationOnOsm({
    required double? destinationZoom,
    required _i6.MapController? mapController,
    required _i7.TickerProvider? vsync,
    required _i2.LatLng? targetLatLng,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateToMyLocationOnOsm,
          [],
          {
            #destinationZoom: destinationZoom,
            #mapController: mapController,
            #vsync: vsync,
            #targetLatLng: targetLatLng,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> animateToMyLocationOnGoogleMap({
    required _i5.Completer<dynamic>? mapController,
    required _i8.LatLng? targetLatLng,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateToMyLocationOnGoogleMap,
          [],
          {
            #mapController: mapController,
            #targetLatLng: targetLatLng,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addLocationItem(_i9.PlaceItemModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLocationItem,
          [location],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateLocationItem(_i9.PlaceItemModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLocationItem,
          [location],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void editLocation() => super.noSuchMethod(
        Invocation.method(
          #editLocation,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.LatLng> update(
    _i5.FutureOr<_i2.LatLng> Function(_i2.LatLng)? cb, {
    _i5.FutureOr<_i2.LatLng> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.LatLng>.value(_FakeLatLng_0(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
      ) as _i5.Future<_i2.LatLng>);

  @override
  bool updateShouldNotify(
    _i3.AsyncValue<_i2.LatLng>? previous,
    _i3.AsyncValue<_i2.LatLng>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [AddRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddRepository extends _i1.Mock implements _i10.AddRepository {
  @override
  _i5.Future<int> addLocation({required _i9.PlaceItemModel? location}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLocation,
          [],
          {#location: location},
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> updateLocation({required _i9.PlaceItemModel? location}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLocation,
          [],
          {#location: location},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LocationRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepositoryImpl extends _i1.Mock
    implements _i11.LocationRepositoryImpl {
  @override
  _i5.Future<void> deleteAllLocations() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllLocations,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> deleteLocation(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteLocation,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i9.PlaceItemModel?> getLocation(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [id],
        ),
        returnValue: _i5.Future<_i9.PlaceItemModel?>.value(),
        returnValueForMissingStub: _i5.Future<_i9.PlaceItemModel?>.value(),
      ) as _i5.Future<_i9.PlaceItemModel?>);

  @override
  _i5.Future<List<_i9.PlaceItemModel>> getLocations() => (super.noSuchMethod(
        Invocation.method(
          #getLocations,
          [],
        ),
        returnValue:
            _i5.Future<List<_i9.PlaceItemModel>>.value(<_i9.PlaceItemModel>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i9.PlaceItemModel>>.value(<_i9.PlaceItemModel>[]),
      ) as _i5.Future<List<_i9.PlaceItemModel>>);

  @override
  _i5.Future<int> insertLocation(_i9.PlaceItemModel? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertLocation,
          [location],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i9.PlaceItemModel>> searchLocations(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchLocations,
          [query],
        ),
        returnValue:
            _i5.Future<List<_i9.PlaceItemModel>>.value(<_i9.PlaceItemModel>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i9.PlaceItemModel>>.value(<_i9.PlaceItemModel>[]),
      ) as _i5.Future<List<_i9.PlaceItemModel>>);

  @override
  _i5.Future<void> updateLocation(
    int? id,
    _i9.PlaceItemModel? location,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLocation,
          [
            id,
            location,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i9.PlaceItemModel>> watchLocations() => (super.noSuchMethod(
        Invocation.method(
          #watchLocations,
          [],
        ),
        returnValue: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
      ) as _i5.Stream<List<_i9.PlaceItemModel>>);

  @override
  _i5.Future<void> updateFavoriteStatus(int? id) => (super.noSuchMethod(
        Invocation.method(
          #updateFavoriteStatus,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i9.PlaceItemModel>> watchFavoriteLocations() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchFavoriteLocations,
          [],
        ),
        returnValue: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
      ) as _i5.Stream<List<_i9.PlaceItemModel>>);

  @override
  _i5.Stream<List<_i9.PlaceItemModel>> watchLocationsByCategory(
          _i12.CategoryEnums? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLocationsByCategory,
          [category],
        ),
        returnValue: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
      ) as _i5.Stream<List<_i9.PlaceItemModel>>);

  @override
  _i5.Stream<List<_i9.PlaceItemModel>> watchLocationsWithLanguageProvider() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLocationsWithLanguageProvider,
          [],
        ),
        returnValue: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i9.PlaceItemModel>>.empty(),
      ) as _i5.Stream<List<_i9.PlaceItemModel>>);

  @override
  _i5.Future<void> importLocations(List<_i9.PlaceItemModel>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #importLocations,
          [data],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
